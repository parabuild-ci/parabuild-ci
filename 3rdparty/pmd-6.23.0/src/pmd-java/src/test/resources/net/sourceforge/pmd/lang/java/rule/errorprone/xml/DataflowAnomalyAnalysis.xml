<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description><![CDATA[
ok
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 void bar(int b) {
  for (int i=0;i<10;i++) { 
  	throw new Exception();
  }
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
DD anomaly
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 void bar() {
  int i=0;
  i=1;
  if (i==2) {}
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
DU anomaly
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 void bar() {
  int i=0;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
UR anomaly
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 void bar() {
  int i;
  if (i == 0) {}
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
more komplex anomalysis
     ]]></description>
        <expected-problems>4</expected-problems>
        <code><![CDATA[
public class Foo {
 void bar(int i) {
  int j = 0;
  int z = 0;
  if (i < 10) {
   j = i;	 
  }
 }
}
     ]]></code>
    </test-code>

    <test-code>
        <description>#1393 PMD hanging during DataflowAnomalyAnalysis</description>
        <!-- Note: due to https://sourceforge.net/p/pmd/bugs/1383/ the 3 problems are false positives!  -->
        <expected-problems>3</expected-problems>
        <code><![CDATA[
public class LoopTest {
    public static void main(String[] args) {
        int[] a = {1,2,3};
        int[] b = {4,5,6};
        int[] c = {7,8,9};
        for (int i : a) {
            if (i == 0) {
                break;
            } else {
                boolean fail = false;
                for (int j : b) {
                    boolean match = false;
                    for (int k : c) {
                        if (k == 42) {
                            match = true;
                        }
                    }
                    if (!match) {
                        fail = true;
                    }
                }
            }
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#408 Assert statements causing </description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class AssertTest {
    public void test() {
        final String s = "";
        assert(s != null);

        System.out.println(s);

        final Double d = 9;
        assert(d != null);

        System.out.println(d);

        final String k = "k";
        assert(k != null);

        System.out.println(k);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 1. DU-Anomaly(b)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 'b' (lines '6'-'7').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int a = 0 ;
       int b = 0 ;
       a = a + b ;
       b = a + b ;
       }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 2. DU-Anomaly(a)</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,5</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 'a' (lines '3'-'7').</message>
        <message>Found 'DU'-anomaly for variable 'a' (lines '5'-'7').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int a = 0 ;
       for(int i = 0 ; i <= 10; i ++){
           a = a+3;
       }
   }
}
        ]]></code>
    </test-code>

    <test-code regressionTest="false">
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 3. DU-Anomaly(a)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>5</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 'a' (lines '5'-'7').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int[] b = new int[10];
       for(int a : b){
           a = a+3;
       }
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 4. DU-Anomaly(a)</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>3,6</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 'a' (lines '3'-'9').</message>
        <message>Found 'DU'-anomaly for variable 'a' (lines '6'-'9').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int a = 0 ;
       int i = 0 ;
       while(i < 30){
           a = a+3;
           i += 3;
       }
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 5. DU-Anomaly(a)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 'a' (lines '6'-'9').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int a = 0 ;
       int i = 0 ;
       do{
           a = a+3;
           i += 3;
       }while(i < 30);
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 6. DU-Anomaly(a)</description>
        <expected-problems>4</expected-problems>
        <expected-linenumbers>6,8,10,12</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 'a' (lines '6'-'14').</message>
        <message>Found 'DU'-anomaly for variable 'a' (lines '8'-'14').</message>
        <message>Found 'DU'-anomaly for variable 'a' (lines '10'-'14').</message>
        <message>Found 'DU'-anomaly for variable 'a' (lines '12'-'14').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int a = 0 ;
       int i = 0 ;
       switch(i){
           case 1 : a = a+1;
           break;
           case 2 : a = a+2;
           break;
           case 3 : a = a+3;
           break;
           default : a = a + 0;
       }
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 7. DU-Anomaly(a)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>9</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 'a' (lines '9'-'11').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int a = 0 ;
       int i = 0 ;
       switch(i){
           case 1 : a = a+1;
           case 2 : a = a+2;
           case 3 : a = a+3;
           default : a = a + 0;
       }
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 9. DU-Anomaly(t1)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>5</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 't1' (lines '5'-'6').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int t1 = 0 ;
       Test2 test = new Test2() ;
       t1 = test.simpleTest(t1) ;
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 12. DU-Anomaly(t1)</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 't1' (lines '6'-'7').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int t1 = 0 ;
       int t2 = 0 ;
       Test2 test = new Test2();
       if((t1 = test.simpleTest(t1)) == t2);
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 13</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int t1 = 0 ;

       Test2 test = new Test2();
       if( (t1 = test.simpleTest(t1)) == t1);
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1905 [java] DataflowAnomalyAnalysis Rule in right order : Case 14. DU-Anomaly(t1, t2)</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>4,6</expected-linenumbers>
        <expected-messages>
        <message>Found 'DU'-anomaly for variable 't2' (lines '4'-'7').</message>
        <message>Found 'DU'-anomaly for variable 't1' (lines '6'-'7').</message>
        </expected-messages>
        <code><![CDATA[
class Test{
   public static void main(String[] args){
       int t1 = 0;
       int t2 = 0;
       Test2 test = new Test2() ;
       if( t1 == (t1 = test.simpleTest(t1))) ;
   }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1749 DD False Positive in DataflowAnomalyAnalysis</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <expected-messages>
            <message>Found 'DU'-anomaly for variable 'a' (lines '4'-'5').</message>
        </expected-messages>
        <code><![CDATA[
public class Test {
  public void test(){
    int a = 0;
    a = a + 3;
  }
}
        ]]></code>
    </test-code>
</test-data>
