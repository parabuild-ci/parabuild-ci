<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>1, nothing wrong</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo {
   private List list;
}
     ]]></code>
    </test-code>

    <test-code>
        <description>2, valid implements</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo implements List {
}
     ]]></code>
    </test-code>

    <test-code>
        <description>3, invalid implements</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo implements java.util.List {
}
     ]]></code>
    </test-code>

    <test-code>
        <description>4, valid extends</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.ArrayList;
public class Foo implements ArrayList {
}
     ]]></code>
    </test-code>

    <test-code>
        <description>5, invalid extends</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.ArrayList;
public class Foo implements java.util.ArrayList {
}
     ]]></code>
    </test-code>

    <test-code>
        <description>6, valid field</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo {
   private List list;
}
     ]]></code>
    </test-code>

    <test-code>
        <description>7, invalid field</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo {
   private java.util.List list;
}
     ]]></code>
    </test-code>

    <test-code>
        <description>8, valid return type</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo {
   private List list();
}
     ]]></code>
    </test-code>

    <test-code>
        <description>9, invalid return type</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo {
   private java.util.List list();
}
     ]]></code>
    </test-code>

    <test-code>
        <description>10, valid formal parameter</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo {
   private void list(List list);
}
     ]]></code>
    </test-code>

    <test-code>
        <description>11, invalid formal parameter</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.List;
public class Foo {
   private void list(java.util.List list);
}
     ]]></code>
    </test-code>

    <test-code>
        <description>12, valid static method call</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.Arrays;
public class Foo {
   List list = Arrays.asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>13, invalid static method call</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.Arrays;
public class Foo {
   List list = java.util.Arrays.asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>14, valid static import method call</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import static java.util.Arrays.asList;
public class Foo {
   List list = asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>15, invalid static import method call</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import static java.util.Arrays.asList;
public class Foo {
   List list = java.util.Arrays.asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>16, valid static import method call with class import</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.Arrays;
import static java.util.Arrays.asList;
public class Foo {
   List list = asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>17, invalid static import method call with class import</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.Arrays;
import static java.util.Arrays.asList;
public class Foo {
   List list = Arrays.asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>18, on-demand, valid field</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.*;
public class Foo {
   private List list;
}
     ]]></code>
    </test-code>

    <test-code>
        <description>19, on-demand, invalid field</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.*;
public class Foo {
   private java.util.List list;
}
     ]]></code>
    </test-code>

    <test-code>
        <description>20, on-demand, valid static import method call </description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import static java.util.Arrays.asList;
public class Foo {
   List list = asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>21, on-demand, invalid static import method call</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import static java.util.Arrays.*;
public class Foo {
   List list = java.util.Arrays.asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>22, valid on-demand static import method call with class import</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.Arrays;
import static java.util.Arrays.*;
public class Foo {
   List list = asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>23, invalid on-demand static import method call with class import</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.util.Arrays;
import static java.util.Arrays.*;
public class Foo {
   List list = Arrays.asList("one");
}
     ]]></code>
    </test-code>

    <test-code>
        <description>#1078 Package statement introduces false positive UnnecessaryFullyQualifiedName violation</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package a.b;

import a.*;

public class Test {}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1404 Java8 'Unnecessary use of fully qualified name' in Streams Collector</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>17</expected-linenumbers>
        <expected-messages>
            <message>Unnecessary use of fully qualified name 'Collectors.toList' due to existing static import 'java.util.stream.Collectors.toList'</message>
        </expected-messages>
        <code><![CDATA[
// https://github.com/FenixEdu/fenixedu-learning/blob/master/src/main/java/org/fenixedu/learning/domain/executionCourse/components/InitialPageComponent.java#L50
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;

public class InitialPageComponent extends BaseExecutionCourseComponent {
    public void handle(Page page, TemplateContext componentContext, TemplateContext globalContext) {
        ExecutionCourse executionCourse = ((ExecutionCourseSite) page.getSite()).getExecutionCourse();
        globalContext.put(
                "professorships",
                executionCourse
                        .getProfessorshipsSet()
                        .stream()
                        .sorted(Comparator.comparing(Professorship::isResponsibleFor).reversed()
                                .thenComparing(Professorship.COMPARATOR_BY_PERSON_NAME)).collect(Collectors.toList()));
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1436 UnnecessaryFullyQualifiedName false positive on clashing static imports with enums</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.ENUM2;
import static net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.ENUM1.*;
import static net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.ENUM2.*;

public class UnnecessaryFullyQualifiedName {
    public static void main(String[] args) {
        System.out.println(A);
        System.out.println(D);
        System.out.println(ENUM2.values());
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1546 part 1 UnnecessaryFullyQualifiedName doesn't take into consideration conflict resolution</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.PhonyMockito;
import static net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.PhonyMockito.*;
import static net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.PhonyPowerMockito.*;

public class Foo {
  private Bar bar = Mockito.mock(Bar.class); // doing simply mock(Bar.class) is ambiguous (compile error)
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1546 part 2 UnnecessaryFullyQualifiedName doesn't take into consideration conflict resolution</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.PhonyMockito;
import static net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.PhonyMockito.*;
import static net.sourceforge.pmd.lang.java.rule.codestyle.UnnecessaryFullyQualifiedNameTest.PhonyPowerMockito.mock;

public class Foo {
  private Bar bar = Mockito.mock(Bar.class); // doing simply mock(Bar.class) would use a differen method than intended
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1555 - UnnecessaryFullyQualifiedName for conflict resolution with inner class</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.util.*;

final class Test {
  private Test() { }

  private static class Locale {
    public final java.util.Locale locale; // Here we need to fully qualify
    public Locale(final String tag) {
      this.locale = java.util.Locale.forLanguageTag(tag);
    }
  }

  public static void main(String[] args) {
    final Locale l = new Locale("fr-CA");
    System.out.println(l.toString());
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1114 - Star import overwritten by explicit import is not correctly handled</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
            import One.*;
            import Two.Problem;


            public class CauseProblem {
                public Problem convert(One.Problem original) {
                    return new Problem();
                }
            }
            ]]></code>
    </test-code>

    <test-code>
        <description>#1186 [java] UnnecessaryFullyQualifiedName doesn't detect java.lang FQ names as violations: without import</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>Unnecessary use of fully qualified name 'java.lang.String' due to existing implicit import 'java.lang.*'</message>
        </expected-messages>
        <code><![CDATA[
public class JavaLang {
    public void convert(java.lang.String s) { // violation here
    }
    public void access(java.lang.reflect.Field f) { // no violation
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1186 [java] UnnecessaryFullyQualifiedName doesn't detect java.lang FQ names as violations: with import</description>
        <expected-problems>1</expected-problems>
        <expected-messages>
            <message>Unnecessary use of fully qualified name 'java.lang.String' due to existing import 'java.lang.String'</message>
        </expected-messages>
        <code><![CDATA[
import java.lang.String;
public class JavaLang {
    public void convert(java.lang.String s) { // violation here
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1186 [java] UnnecessaryFullyQualifiedName doesn't detect java.lang FQ names as violations: with avoiding conflict import</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import org.foo.String;
public class JavaLang {
    public void convert(java.lang.String s) { // no violation
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1186 [java] UnnecessaryFullyQualifiedName doesn't detect java.lang FQ names as violations: static members of classes in java.lang</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class JavaLang {
    public void foo() {
        ProcessBuilder pb = new ProcessBuilder("echo");
        pb.redirectError(java.lang.ProcessBuilder.Redirect.DISCARD); // violation
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1216 [java] UnnecessaryFullyQualifiedName false positive for the same name method</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
            import java.awt.Component;
            import java.awt.Container;
            import java.util.Arrays;
            import java.util.asList.*; // we don't use stream since we're on java 7


            public final class Test {
                public static List<String> stream(Container parent) {
                    return Arrays.asList("", "");
                }
            }
            ]]></code>
    </test-code>

    <test-code>
        <description>#1255 [java] UnnecessaryFullyQualifiedName false positive: static method on shadowed implicitly imported class</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import x.y.Thread;

public class ThreadStuff {
    public Thread stuff() {
        return new Thread(java.lang.Thread.currentThread());
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Nullpointer in isJavaLangImplicit for java.lang.String[] arrays</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
public class TestArrayType {
    String[] someArray = new String[0];

    public void foo() {
        boolean b1 = someArray instanceof String[];
        boolean b2 = someArray instanceof java.lang.String[]; // unnecessary FQN
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1199 false negative for same package FQCN</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>4</expected-linenumbers>
        <code><![CDATA[
package org.foo;

public class SamePackage {
    public void convert(org.foo.Bar s) { // violation
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#1951 false positive when package name is obscured by variable</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package threads;

public class FQNTest {
  public static void main(String[] args) {
    Thread[] threads = new Thread[5];
    int i = threads.length;
  }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>False positive when package name is obscured by variable (2)</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package threads;

public class FQNTest {
  public static void main(String[] args) {
    Thread[] threads = new Thread[5];
    int i = threads.length.foo;
  }
}

class length {
    static int foo;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>False negative when name refers to static field</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <expected-messages>
            <message>Unnecessary use of fully qualified name 'threads.length.foo' due to existing same package import 'threads.*'</message>
        </expected-messages>
        <code><![CDATA[
package threads;

public class FQNTest {
  public static void main(String[] args) {
    // threads.length is the class
    int i = threads.length.foo;
  }
}

class length {
    static int foo;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>False positive when type name is obscured by variable</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[

public class FQNTest {
  public static void main(String[] args) {
    length length = new length();
    // the type name 'length' is obscured.
    int i = length.foo;
  }
}

class length {
    static int foo;
}
        ]]></code>
    </test-code>

    <test-code>
        <description>False positive when subpackage is referenced</description>
        <expected-problems>1</expected-problems>
        <expected-linenumbers>6</expected-linenumbers>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryfullyqualifiedname;

public class FQNTest {
    public void foo() {
        new net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryfullyqualifiedname.subpackage.MyClass(); // no violation
        new net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryfullyqualifiedname.TestClass(); // violation
    }
}
        ]]></code>
    </test-code>
    
    <test-code>
        <description>False positive when same package static method is referenced</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package java.util;

public class Problem {
  {
    Collections.emptySet(); // false positive for UnnecessaryFullyQualifiedName
  }
}
        ]]></code>
    </test-code>
    
    <test-code>
        <description>False positive when same package inner class is referenced</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.codestyle;

public class UnnecessaryFullyQualifiedName {
    public static void main(String[] args) {
        System.out.println(UnnecessaryFullyQualifiedNameTest.ENUM1.A);
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#2098 false positive with annotated package</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
@com.example.subpackage.ExampleAnnotation
package com.example;
        ]]></code>
    </test-code>

    <test-code>
        <description>#2098 false positive with annotated package - with type-resolution</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
@net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryfullyqualifiedname.subpackage.MyAnnotation
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryfullyqualifiedname;
        ]]></code>
    </test-code>

    <test-code>
        <description>False-Negative when referencing inner class</description>
        <expected-problems>7</expected-problems>
        <expected-linenumbers>3,4,6,7,8,9,12</expected-linenumbers>
        <code><![CDATA[
package com.example;

public class ClassOne extends com.example.ClassTwo {
    com.example.ClassTwo.Builder builder = null;

    public void run() throws com.example.ClassOne.MyException {
        com.example.ClassOne.Builder builder = null;
        com.example.ClassTwo.Builder builder2 = null;
        throw new com.example.ClassOne.MyException();
    }

    public class Builder extends com.example.ClassTwo.Builder {
    }

    public static class MyException extends Exception { }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#2029 [java] UnnecessaryFullyQualifiedName false-positive for non-static nested classes</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryfullyqualifiedname;

import static net.sourceforge.pmd.lang.java.rule.codestyle.unnecessaryfullyqualifiedname.TestClass.*;

public class SomeClass {

    public void theMethod() {
        someMethod();
        Object someObject = new Object();
        if(someObject instanceof TestClass.SomeInnerClass) {
            System.out.println("");
        }
    }
}
        ]]></code>
    </test-code>
</test-data>
