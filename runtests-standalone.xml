<project name="bt" default="run.tests.standalone">

  <!--
  This property controls JUNIT behaviour in case of test
  errors. It can be overriden by a calling script (see build.xml)
  -->
  <property name="fail.fast" value="on"/>

  <!-- Prepare -->
  <target name="run.tests.standalone.init">
    <echo message="Starting tests ..."/>
    <delete dir="${test.temp.dir}"/>
    <mkdir dir="${test.temp.dir}"/>
    <condition property="is.windows">
      <os family="windows"/>
    </condition>
  </target>


  <!-- Run standalone tests -->
  <target name="run.tests.standalone" depends="run.tests.standalone.init">
    <junit fork="yes" printsummary="on" haltonfailure="${fail.fast}" haltonerror="${fail.fast}"
           errorproperty="test.errors" failureproperty="test.failures" maxmemory="100000000">
      <sysproperty key="test.data.home" value="${test.data}"/>
      <sysproperty key="test.prod.home" value="${build.dir.prod}"/>
      <classpath>
        <pathelement path="${build.dir.test.classes}/"/>
        <pathelement path="${build.dir.classes}/"/>
        <pathelement path="${installer.classes.dir}/"/>
        <pathelement path="${test.config}"/>
        <pathelement path="${log4j-1.2-api-2.8.2.jar}"/>
        <pathelement path="${log4j-api-2.8.2.jar}"/>
        <path refid="test.classpath"/>
      </classpath>
      <jvmarg value="-Xms50m"/>
      <jvmarg value="-Xmx50m"/>
      <jvmarg value="-Djava.awt.headless=true"/>
      <jvmarg value="-Dtest.temp.dir=${test.temp.dir}"/>
      <jvmarg value="-Dtest.dir.manager=${test.dir.manager}"/>
      <jvmarg value="-Dcatalina.home=${build.dir.tomcat}/lib"/>
      <jvmarg value="-Dcatalina.base=${build.dir.tomcat}/etc"/>
      <jvmarg value="-Djava.io.tmpdir=${build.dir}"/>
      <jvmarg value="-Djavax.xml.transform.TransformerFactory=net.sf.saxon.TransformerFactoryImpl"/>

      <!--
      Run only test defined by test.single property
      this property normally set via -D option of ant command line
      and holds prefix name of the class(es) with test case
      -->
      <batchtest fork="yes" todir="${test.log.dir}" haltonfailure="${fail.fast}" haltonerror="${fail.fast}"
                 errorproperty="test.errors" failureproperty="test.failures" if="test.single">
        <fileset dir="${build.dir.test.classes}">
          <include name="**/${test.single}*.class"/>
          <exclude name="**/*$*.class"/>
        </fileset>
      </batchtest>

      <!--
      Run all standlalone tests as a batch
      -->
      <batchtest fork="yes" todir="${test.log.dir}" haltonfailure="${fail.fast}" haltonerror="${fail.fast}"
                 errorproperty="test.errors" failureproperty="test.failures" unless="test.single">
        <fileset dir="${build.dir.test.classes}">
          <include name="**/SATest*.class"/>
          <exclude name="**/*$*.class"/>
        </fileset>
      </batchtest>

      <!--
      Run windows-only tests as a batch.
      -->
      <batchtest fork="yes" todir="${test.log.dir}" haltonfailure="${fail.fast}" haltonerror="${fail.fast}"
                 errorproperty="test.errors" failureproperty="test.failures" unless="test.single" if="is.windows">
        <fileset dir="${build.dir.test.classes}">
          <include name="**/WindowsOnlySATest*.class"/>
          <exclude name="**/*$*.class"/>
        </fileset>
      </batchtest>

      <formatter type="plain" usefile="false"/>
      <formatter type="xml"/>
    </junit>
  </target>

</project>
