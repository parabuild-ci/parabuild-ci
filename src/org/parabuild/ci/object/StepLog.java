/*
 * Parabuild CI licenses this file to You under the LGPL 2.1
 * (the "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      https://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.parabuild.ci.object;

import net.sf.hibernate.Lifecycle;
import net.sf.hibernate.Session;

import java.io.Serializable;

/**
 * Sequence log. Describes a archived sequence log.
 *
 * @hibernate.class table="STEP_LOG" dynamic-update="true"
 * @hibernate.cache usage="read-write"
 */
public final class StepLog implements Serializable, ObjectConstants, Lifecycle {

  private static final long serialVersionUID = -2506229207070111304L; // NOPMD

  // NOTE: vimeshev - don't change constants below as those values are
  // used on the persistance level
  public static final byte TYPE_MAIN = 1;
  public static final byte TYPE_CUSTOM = 4;
  public static final byte TYPE_WINDOW = 5;

  /**
   * Path type is unknown.
   */
  public static final byte PATH_TYPE_UNKNOWN = 0;

  /**
   * Path type is a single text file.
   */
  public static final byte PATH_TYPE_TEXT_FILE = 1;

  /**
   * Path type is a flat directory with text files.
   */
  public static final byte PATH_TYPE_TEXT_DIR = 2;

  /**
   * XML file containing merged set of a single JUnit testcases.
   */
  public static final byte PATH_TYPE_JUNIT_XML = 3;

  /**
   * XML file containing result of PMD work
   */
  public static final byte PATH_TYPE_PMD_XML = 4;

  /**
   * Single HTML file.
   */
  public static final byte PATH_TYPE_HTML_FILE = 5;

  /**
   * HTML directory.
   */
  public static final byte PATH_TYPE_HTML_DIR = 6;

  public static final byte PATH_TYPE_NUNIT_XML = 7;

  public static final byte PATH_TYPE_FINDBUGS_XML = 8;

  /**
   * XML file containing CPP Unit tests in XML format
   */
  public static final byte PATH_TYPE_CPPUNIT_XML = 9;


  /**
   * XML file contaling CHECKSTYLE report.
   */
  public static final byte PATH_TYPE_CHECKSTYLE_XML = 10;

  /**
   * PHPUnit report
   */
  public static final byte PATH_TYPE_PHPUNIT_XML = 11;

  public static final byte PATH_TYPE_UNITTESTPP_XML = 12;

  public static final byte PATH_TYPE_GENERIC_TEST = 13;

  /**
   * Boot XML.
   */
  public static final byte PATH_TYPE_BOOST_XML = 14;


  /**
   * Googletest XML.
   */
  public static final byte PATH_TYPE_GOOGLETEST_XML = 15;

  /**
   * Squish tester.
   */
  public static final byte PATH_TYPE_SQUISH_XML = 16;

  // PK
  private int ID = -1;

  private byte found;
  private byte type;
  private byte pathType = PATH_TYPE_UNKNOWN;
  private int stepRunID = -1;
  private long timeStamp;
  private String archiveFileName;
  private String description;
  private String path;


  /**
   * Returns sequence ID
   *
   * @return int
   *
   * @hibernate.property column="STEP_RUN_ID" unique="false"
   * null="false"
   */
  public int getStepRunID() {
    return stepRunID;
  }


  public void setStepRunID(final int stepRunID) {
    this.stepRunID = stepRunID;
  }


  /**
   * Returns log ID
   *
   * @return int
   *
   * @hibernate.id generator-class="identity" column="ID"
   * unsaved-value="-1"
   */
  public int getID() {
    return ID;
  }


  public void setID(final int ID) {
    this.ID = ID;
  }


  /**
   * Returns log ID as string.
   *
   * @return String
   */
  public String getIDAsString() {
    return Integer.toString(ID);
  }


  /**
   * Returns an archive file name. The archive file name is a
   * name of a generated by ArchiveManager a file or a directory
   * that hosts the log.
   * <p/>
   * It will be a file for the following log path types:
   * <br/>PATH_TYPE_JUNIT_XML <br/>PATH_TYPE_PMD_XML
   * <br/>PATH_TYPE_TEXT_FILE
   * <p/>
   * It will be a directory for the following log path types:
   * <br/>PATH_TYPE_HTML_DIR <br/>PATH_TYPE_HTML_FILE
   * <br/>PATH_TYPE_TEXT_DIR
   *
   * @return String
   *
   * @hibernate.property column="FILE" unique="false"
   * null="false"
   * @see StepLog#PATH_TYPE_JUNIT_XML
   * @see StepLog#PATH_TYPE_PMD_XML
   * @see StepLog#PATH_TYPE_TEXT_FILE
   * @see StepLog#PATH_TYPE_HTML_DIR
   * @see StepLog#PATH_TYPE_HTML_FILE
   * @see StepLog#PATH_TYPE_TEXT_DIR
   */
  public String getArchiveFileName() {
    return archiveFileName;
  }


  public void setArchiveFileName(final String archiveFileName) {
    this.archiveFileName = archiveFileName;
  }


  /**
   * Returns relative log path as it was declared in the log
   * config.
   *
   * @return int
   *
   * @hibernate.property column="PATH" unique="false"
   * null="false"
   */
  public String getPath() {
    return path;
  }


  public void setPath(final String path) {
    this.path = path;
  }


  /**
   * Returns log description
   *
   * @return
   *
   * @hibernate.property column="DESCRIPTION" unique="false"
   * null="true"
   */
  public String getDescription() {
    return description;
  }


  public void setDescription(final String description) {
    this.description = description;
  }


  /**
   * Returns log description
   *
   * @return
   *
   * @hibernate.property column="TYPE" unique="false"
   * null="false"
   */
  public byte getType() {
    return type;
  }


  public void setType(final byte type) {
    this.type = type;
  }


  /**
   * Returns if log found
   *
   * @return
   *
   * @hibernate.property column="FOUND" unique="false"
   * null="false"
   */
  public byte getFound() {
    return found;
  }


  public void setFound(final byte found) {
    this.found = found;
  }


  /**
   * Path type describes what kind of a file is stored in the log
   * archive under the log's path.
   * <p/>
   * Path type is used to determine how to display log(s)
   *
   * @hibernate.property column = "PATH_TYPE" unique="false"
   * null="false"
   * @see #PATH_TYPE_TEXT_FILE
   * @see #PATH_TYPE_TEXT_DIR
   * @see #PATH_TYPE_JUNIT_XML
   */
  public byte getPathType() {
    return pathType;
  }


  public void setPathType(final byte pathType) {
    this.pathType = pathType;
  }


  /**
   * Returns timestamp
   *
   * @return long
   *
   * @hibernate.version column="TIMESTAMP"  null="false"
   */
  public long getTimeStamp() {
    return timeStamp;
  }


  public void setTimeStamp(final long timeStamp) {
    this.timeStamp = timeStamp;
  }


  public boolean onSave(final Session session) {
    return NO_VETO;
  }


  public boolean onUpdate(final Session session) {
    if (!validForSave()) return VETO;
    return NO_VETO;
  }


  public boolean onDelete(final Session session) {
    return NO_VETO;
  }


  public void onLoad(final Session session, final Serializable serializable) {
  }


  /**
   * Validates for save operation.
   */
  private boolean validForSave() {
    return pathType != PATH_TYPE_UNKNOWN;
  }


  public String toString() {
    return "StepLog{" +
      "ID=" + ID +
      ", found=" + found +
      ", type=" + type +
      ", pathType=" + pathType +
      ", stepRunID=" + stepRunID +
      ", timeStamp=" + timeStamp +
      ", archiveFileName='" + archiveFileName + '\'' +
      ", description='" + description + '\'' +
      ", path='" + path + '\'' +
      '}';
  }
}
