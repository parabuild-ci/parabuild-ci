<?xml version="1.0"?>
<project name="bt" default="usage" basedir=".">

  <!-- set global properties for this build -->
  <property file="build.properties"/>
  <property environment="env"/>

  <!-- Build directories -->
  <property name="build.dir" value="${project.home}/temp"/>
  <property name="build.dir.classes" value="${build.dir}/classes"/>
  <property name="installer.classes.dir" value="${build.dir}/installer_classes"/>
  <property name="build.dir.test.classes" value="${build.dir}/test_classes"/>
  <property name="build.dir.version.staging" value="${build.dir}/version_staging"/>
  <property name="build.dir.realm.staging" value="${build.dir}/realm_staging"/>
  <property name="build.dir.realm.result" value="${build.dir}/realm_result"/>
  <property name="build.dir.logviewer.staging" value="${build.dir}/logviewer_staging"/>
  <property name="build.dir.logviewer.result" value="${build.dir}/logviewer_result"/>
  <property name="build.dir.cli.staging" value="${build.dir}/staging_cli"/>
  <property name="build.dir.test.result" value="${build.dir}/test_result"/>
  <property name="build.dir.temp" value="${build.dir}/build_temp"/>
  <property name="build.dir.result" value="${build.dir}/result"/>
  <property name="build.dir.distrib" value="${build.dir}/result_distrib"/>
  <property name="build.dir.distrib.descriptor" value="${build.dir}/result_distrib_descriptor"/>
  <property name="build.dir.prod" value="${build.dir.result}/parabuild"/>
  <property name="build.dir.tomcat" value="${build.dir.prod}"/>
  <property name="build.dir.database" value="${build.dir.prod}/etc/data"/>
  <property name="build.dir.clover" value="${build.dir}/clover"/>
  <property name="build.dir.clover.db" value="${build.dir.clover}/db"/>
  <property name="build.dir.realm.classes" value="${build.dir}/realm_classes"/>
  <property name="build.dir.hessian.classes" value="${build.dir}/hessian_classes"/>
  <property name="build.dir.hessian.result" value="${build.dir}/hessian_result"/>
  <property name="war.staging" value="${build.dir}/staging_war"/>
  <property name="build.dir.docs" value="${build.dir.prod}/docs"/>
  <property name="docs.result.dir" value="${build.dir}/docs_result"/>
  <property name="webservice.staging" value="${build.dir}/wsdl2java"/>


  <!-- Test properties-->
  <property name="test.war.staging" value="${build.dir}/test_war_staging"/>
  <property name="test.quality.logs" value="${build.dir}/logs_code_quality"/>
  <property name="test.temp.dir" value="${build.dir}/test_temp"/>
  <property name="test.log.dir" value="${build.dir}/test_logs"/>
  <property name="test.dir.manager" value="${build.dir}/test_run_manager"/>
  <property name="test.dir.builder" value="${build.dir}/test_run_builder"/>
  <property name="mockito.home" value="${3rdparty}/mockito-1.8.5"/>

  <!-- Product configuration -->
  <property name="tomcat.http.port" value="8080"/>
  <property name="tomcat.serv.port" value="8005"/>

  <!-- Automated website deployment -->
  <property name="deploy.to.downloads" value="${env.DEPLOY_TO_DONWLOADS}"/>

  <target name="usage">
    <echo>
      Build targets:
      ant all - builds product and tests
      ant all.clean - builds product and tests cleanly
      ant cli - builds product command line client
      ant distrib - builds distribution media
      ant docs - builds product documentation
      ant product - builds product
      ant release - builds product release (add -Ddo.release.build=true to run rlease build)
      ant tests - builds tests

      Test targets:
      ant run.tests - runs standalone and serverside test
      ant run.tests.standalone - runs standalone tests only
      ant run.tests.serverside - runs serverside tests only
      ant run.tests.all - runs ALL tests
      ant run.quality.tests - runs sourceline code quality tests
      export.database - exports database.

      Options:
      -Dtest.remote.builder=true - Forces serverside tests to use remote builder (at localhost)
      -Dtest.single=class name - Executes only single test
      -Dtest.dataset=path - Overrides fully qualified path to test dataset.
      -Dschema.sql=path - Overridea fully qualified path to Parabuild database schema.

    </echo>
  </target>

  <target name="ant">
    <!-- This is a dummy target to serve cases when ant is called
    with cut'n'pasted calls from usage, so that

        ant ant all.clean

    does not fail -->
  </target>

  <!-- Dependencies -->

  <!-- Struts -->

  <!--
  commons-fileupload-1.3.2.jar	commons-lang3-3.2.jar		freemarker-2.3.22.jar		ognl-3.0.19.jar		**	xwork-core-2.5.10.1.jar
commons-io-2.2.jar		commons-logging-1.1.3.jar	javassist-3.11.0.GA.jar		struts2-core-2.5.10.1.jar
  -->

  <property name="struts.lib" value="${3rdparty}/struts-2.5.16/lib"/>
  <property name="commons-fileupload.jar" value="${struts.lib}/commons-fileupload-1.3.3.jar"/>
  <property name="commons-io.jar" value="${struts.lib}/commons-io-2.5.jar"/>
  <property name="commons-lang.jar" value="${struts.lib}/commons-lang3-3.6.jar"/>
  <property name="freemarker.jar" value="${3rdparty}/apache-freemarker-2.3.30-bin/freemarker.jar"/>
  <property name="javassist.jar" value="${struts.lib}/javassist-3.20.0-GA.jar"/>
  <property name="log4j-1.2-api-2.8.2.jar" value="${3rdparty}/apache-log4j-2.8.2-bin/log4j-1.2-api-2.8.2.jar"/>
  <property name="log4j-api-2.8.2.jar" value="${3rdparty}/apache-log4j-2.8.2-bin/log4j-api-2.8.2.jar"/>
  <property name="log4j-core-2.8.2.jar" value="${3rdparty}/apache-log4j-2.8.2-bin/log4j-core-2.8.2.jar"/>
  <property name="log4j-web-2.8.2.jar" value="${3rdparty}/apache-log4j-2.8.2-bin/log4j-web-2.8.2.jar"/>
  <property name="ognl-3.1.12.jar" value="${struts.lib}/ognl-3.1.15.jar"/>
  <property name="struts2-core-2.5.16.jar" value="${struts.lib}/struts2-core-2.5.16.jar"/>
  <property name="struts2-sitemesh-plugin-2.5.16.jar" value="${struts.lib}/struts2-sitemesh-plugin-2.5.16.jar"/>

  <!-- Sitemesh -->
  <property name="sitemesh.jar" value="${3rdparty}/sitemesh/sitemesh-2.4.2.jar"/>

  <!-- GWT -->
  <property name="gwt.sdk" location="${3rdparty}/gwt-2.9.0"/>
  <property name="gwt-servlet.jar" value="${gwt.sdk}/gwt-servlet.jar"/>
  <property name="gwt-servlet-deps.jar" value="${gwt.sdk}/gwt-servlet-deps.jar"/>
  <property name="gwt-user.jar" value="${gwt.sdk}/gwt-user.jar"/>
  <property name="gwt-dev.jar" value="${gwt.sdk}/gwt-dev.jar"/>
  <property name="gwt-validation-api.jar" value="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
  <property name="gwt-validation-api-sources.jar" value="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>

  <path id="common.classpath">
    <pathelement path="${activation.jar}"/>
    <pathelement path="${axis.jar}"/>
    <pathelement path="${clover.jar}"/>
    <pathelement path="${commons-collections.jar}"/>
    <pathelement path="${commons-fileupload.jar}"/>
    <pathelement path="${commons-io.jar}"/>
    <pathelement path="${commons-lang.jar}"/>
    <pathelement path="${commons-logging.jar}"/>
    <pathelement path="${concurrent.jar}"/>
    <pathelement path="${dom4j.jar}"/>
    <pathelement path="${ehcache.jar}"/>
    <pathelement path="${freemarker.jar}"/>
    <pathelement path="${hessian.jar}"/>
    <pathelement path="${hibernate2.jar}"/>
    <pathelement path="${hsqldb.jar}"/>
    <pathelement path="${javassist.jar}"/>
    <pathelement path="${jaxen.jar}"/>
    <pathelement path="${jaxrpc.jar}"/>
    <pathelement path="${jcommon.jar}"/>
    <pathelement path="${jfreechart.jar}"/>
    <pathelement path="${log4j-1.2-api-2.8.2.jar}"/>
    <pathelement path="${log4j-api-2.8.2.jar}"/>
    <pathelement path="${log4j-core-2.8.2.jar}"/>
    <pathelement path="${lucene.jar}"/>
    <pathelement path="${mail.jar}"/>
    <pathelement path="${msnm.jar}"/>
    <pathelement path="${ognl-3.1.12.jar}"/>
    <pathelement path="${quartz.jar}"/>
    <pathelement path="${rome.jar}"/>
    <pathelement path="${saaj.jar}"/>
    <pathelement path="${servlet.jar}"/>
    <pathelement path="${smack.jar}"/>
    <pathelement path="${smtp.jar}"/>
    <pathelement path="${struts2-core-2.5.16.jar}"/>
    <pathelement path="${viewtier.jar}"/>
    <!-- GWT -->
    <pathelement path="${gwt-user.jar}"/>
    <pathelement path="${gwt-validation-api.jar}"/>
    <pathelement path="${gwt-validation-api-sources.jar}"/>
    <pathelement path="${gwt-servlet.jar}"/>
    <pathelement path="${gwt-servlet-deps.jar}"/>
  </path>


  <path id="compile.classpath">
    <path refid="common.classpath"/>
    <pathelement path="${log4j-core-2.8.2.jar}"/>
    <pathelement path="${jade.jar}"/>
    <pathelement path="${httpclient.jar}"/>
    <pathelement path="${jdic.jar}"/>
  </path>

  <path id="mockito.classpath">
    <pathelement path="${mockito.home}/mockito-all-1.8.5.jar"/>
  </path>


  <path id="test.classpath">
    <pathelement path="${junit.jar}"/>
    <pathelement path="${junitaddons.jar}"/>
    <pathelement path="${dbunit.jar}"/>
    <pathelement path="${cactus.jar}"/>
    <pathelement path="${aspectjrt.jar}"/>
    <pathelement path="${httpclient.jar}"/>
    <pathelement path="${gbase.jar}"/>
    <pathelement path="${jade.jar}"/>
    <pathelement path="${httpunit.jar}"/>
    <pathelement path="${tidy.jar}"/>
    <path refid="mockito.classpath"/>
    <path refid="common.classpath"/>
    <!-- Should we have separate cp for installer tests? -->
    <pathelement path="${i4jruntime.jar}"/>
  </path>


  <property name="test.classpath" refid="test.classpath"/>


  <path id="tomcat.ant.classpath">
    <fileset file="${tomcat.home}/bin/tomcat-juli.jar"/>
    <fileset file="${tomcat.home}/bin/bootstrap.jar"/>
    <fileset dir="${tomcat.home}/lib" includes="*.jar"/>
  </path>


  <fileset dir="${config}" id="product.resources">
    <include name="**/macosx/**"/>
    <include name="checkstyle-report.xsl"/>
    <include name="boost-test-log-report.xsl"/>
    <include name="cppunit-log-report.xsl"/>
    <include name="findbugs-report.xsl"/>
    <include name="findbugs-report2.xsl"/>
    <include name="hibernate.properties"/>
    <include name="hsqldb-database.properties"/>
    <include name="hsqldb-database.script"/>
    <include name="junit-log-report.xsl"/>
    <include name="mercurial-style.txt"/>
    <include name="nunit-log-report.xsl"/>
    <include name="p4_change_template.txt"/>
    <include name="p4_client_template.txt"/>
    <include name="p4_label_template.txt"/>
    <include name="parabuild-findbugs.xml"/>
    <include name="pmd-report.xsl"/>
    <include name="squish-log-report.xsl"/>
    <include name="unittestpp-log-report.xsl"/>
    <include name="ehcache.xml"/>
    <include name="struts.properties"/>
    <include name="struts.xml"/>
    <include name="struts.properties"/>
    <include name="decorators.xml"/>
  </fileset>

  <!-- Reusable across the scripts taks defs -->
  <taskdef resource="clovertasks" classpath="${clover.jar}"/>
  <taskdef name="if" classname="ise.antelope.tasks.IfTask" classpath="${anthelope.jar}"/>
  <taskdef name="switch" classname="ise.antelope.tasks.SwitchTask" classpath="${anthelope.jar}"/>
  <taskdef name="antfetch" classname="ise.antelope.tasks.AntFetch" classpath="${anthelope.jar}"/>
  <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpath="${dbunit.jar}"/>
  <taskdef name="repeat" classname="ise.antelope.tasks.Repeat" classpath="${3rdparty}/anthelope3210/AntelopeTasks_3.2.10.jar"/>
  <taskdef name="jasper" classname="org.apache.jasper.JspC" classpathref="tomcat.ant.classpath"/>
  <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="tomcat.ant.classpath"/>
  <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpathref="tomcat.ant.classpath"/>
  <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="tomcat.ant.classpath"/>
  <taskdef name="stop" classname="org.apache.catalina.ant.StopTask" classpathref="tomcat.ant.classpath"/>

  <!-- Configure version -->
  <target name="version">

    <!-- Set version -->
    <property name="release.major" value="4"/>
    <property name="release.minor" value="5"/>
    <property name="release.patch" value="0"/>
    <property name="release.version" value="${release.major}.${release.minor}.${release.patch}"/>

    <!-- Set version information -->
    <tstamp>
      <!-- Do not change this format - ParabuildPreInstallAction depends on it -->
      <format property="release.date" pattern="dd MMM yyyy HH:mm" locale="en"/>
    </tstamp>


    <if name="do.release.build" value="true">

      <!-- Normal release build -->
      <fail message="Required environment variable PARABUILD_BUILD_NUMBER is not set" unless="env.PARABUILD_BUILD_NUMBER"/>
      <fail message="Required environment variable PARABUILD_CHANGE_LIST_NUMBER is not set" unless="env.PARABUILD_CHANGE_LIST_NUMBER"/>
      <property name="release.build" value="${env.PARABUILD_BUILD_NUMBER}"/>
      <property name="release.change" value="${env.PARABUILD_CHANGE_LIST_NUMBER}"/>
      <echo message="Release build"/>
      <break/>
      <else>

        <!-- Snapshot build -->
        <echo message="Snapshot build"/>
        <property name="release.build" value="SNAPSHOT"/>
        <property name="release.change" value="SNAPSHOT"/>
      </else>
    </if>

    <!-- Show build attributes -->
    <echo message="        Version: ${release.version}"/>
    <echo message="   Build number: ${release.build}"/>
    <echo message="   Build change: ${release.change}"/>
    <echo message="   Build date  : ${release.date}"/>
    <echo message="   "/>
  </target>


  <!--
  **********************************************************************************************************************
  *** Init                                                                                                           ***
  **********************************************************************************************************************
  -->
  <target name="init" depends="version">
    <tstamp>
      <format property="build.date" pattern="dd-MMM-yyyy"/>
    </tstamp>
    <mkdir dir="${build.dir.classes}"/>
    <mkdir dir="${build.dir.clover}"/>
    <mkdir dir="${build.dir.database}"/>
    <mkdir dir="${build.dir.distrib}"/>
    <mkdir dir="${build.dir.docs}"/>
    <mkdir dir="${build.dir.prod}"/>
    <mkdir dir="${build.dir.realm.result}"/>
    <mkdir dir="${build.dir.realm.staging}"/>
    <mkdir dir="${build.dir.result}"/>
    <mkdir dir="${build.dir.temp}"/>
    <mkdir dir="${build.dir.test.classes}"/>
    <mkdir dir="${build.dir.test.result}"/>
    <mkdir dir="${build.dir.tomcat}"/>
    <mkdir dir="${build.dir.tomcat}/lib"/>
    <mkdir dir="${build.dir.tomcat}/logs"/>
    <mkdir dir="${build.dir.tomcat}/etc/app"/>
    <mkdir dir="${build.dir.tomcat}/etc/build"/>
    <mkdir dir="${build.dir.tomcat}/etc/temp"/>
    <mkdir dir="${build.dir.tomcat}/etc/index"/>
    <mkdir dir="${build.dir.tomcat}/etc/logs"/>
    <mkdir dir="${build.dir.tomcat}/etc/msgs"/>
    <mkdir dir="${build.dir.tomcat}/etc/system"/>
    <mkdir dir="${build.dir.tomcat}/etc/temp"/>
    <mkdir dir="${build.dir.tomcat}/etc/work"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${test.dir.builder}"/>
    <mkdir dir="${test.dir.manager}"/>
    <mkdir dir="${test.log.dir}"/>
    <mkdir dir="${test.quality.logs}"/>
    <mkdir dir="${test.temp.dir}"/>
    <mkdir dir="${test.war.staging}"/>

    <!-- Init Parabuild version file -->

    <!-- Put version file to META-INF -->
    <mkdir dir="${build.dir.version.staging}"/>
    <propertyfile file="${build.dir.version.staging}/parabuild-version.properties" comment="Parabuild version">
      <entry operation="=" key="parabuild.release.version" value="${release.version}"/>
      <entry operation="=" key="parabuild.release.change" value="${release.change}"/>
      <entry operation="=" key="parabuild.release.date" value="${release.date}"/>
      <entry operation="=" key="parabuild.release.build" value="${release.build}"/>
    </propertyfile>
  </target>


  <target name="clean" depends="version">
    <ant antfile="build-clean.xml" inheritall="true"/>
  </target>

  <!--
  **********************************************************************************************************************
  *** Realm                                                                                                           ***
  **********************************************************************************************************************
  -->
  <target name="realm" depends="realm.compile, realm.jar">
  </target>

  <target name="realm.prepare">
    <mkdir dir="${build.dir.realm.classes}"/>
  </target>


  <target name="realm.resources">
    <copy todir="${build.dir.realm.classes}">
      <fileset refid="product.resources"/>
    </copy>
  </target>

  <!-- Compile Parabuild remote build manager realm-->
  <target name="realm.compile" depends="realm.prepare, realm.resources">
    <javac destdir="${build.dir.realm.classes}" includes="org/parabuild/ci/realm/**.java" debug="on" includeantruntime="false">
      <compilerarg value="-proc:none"/>
      <classpath>
        <pathelement path="${commons-logging.jar}"/>
        <fileset dir="${tomcat.home}/lib"/>
      </classpath>
      <src path="${src}"/>
    </javac>
  </target>


  <target name="realm.jar.prepare" depends="realm.compile">
    <uptodate property="realm.jar.uptodate" targetfile="${build.dir.realm.staging}/parabuild-realm.jar">
      <srcfiles dir="${build.dir.realm.classes}"/>
    </uptodate>
  </target>


  <target name="realm.jar" depends="realm.compile, realm.jar.prepare" unless="realm.jar.uptodate">
    <!-- copy realm -->
    <copy file="${src}/org/parabuild/ci/realm/realm-descriptor.xml"
          todir="${build.dir.realm.classes}/org/parabuild/ci/realm/"/>
    <!-- jar -->
    <jar destfile="${build.dir.realm.staging}/parabuild-realm.jar" compress="true" update="true">
      <fileset dir="${build.dir.realm.classes}"/>
    </jar>
  </target>


  <target name="logviewer" depends="init">
    <antfetch antfile="build-logwatcher.xml" inheritall="true" inheritrefs="true"/>
  </target>


  <target name="tray" depends="init">
    <antfetch antfile="build-tray.xml" inheritall="true" inheritrefs="true"/>
  </target>


  <target name="cli" depends="product">
    <antfetch antfile="build-cli.xml" inheritall="true" inheritrefs="true"/>
  </target>


  <target name="product" depends="init,database,realm,tray,logviewer,installer,docs">
    <!--<target name="product" depends="init,database,realm,jira,tray,installer,docs,resources">-->
    <antfetch antfile="build-prod.xml" inheritall="true" inheritrefs="true"/>
    <antfetch antfile="build-cli.xml" inheritall="true" inheritrefs="true"/>
    <ant antfile="build-licenses.xml" inheritall="true" inheritrefs="true"/>
  </target>


  <target name="docs" depends="init">
    <ant antfile="build-docs.xml" inheritall="true" inheritrefs="true"/>
  </target>


  <!--  <target name="release" depends="all.clean,run.tests"> -->
  <target name="release" depends="clean">
    <property name="is.release.build" value="true"/>
    <antfetch antfile="build-release.xml" inheritall="true" inheritrefs="true" return="release.build,release.change,release.date"/>
    <ant antfile="build-distrib.xml" inheritall="true" inheritrefs="true"/>
    <ant antfile="build-deploy.xml" inheritall="true" inheritrefs="true"/>
  </target>


  <target name="distrib" depends="product,docs">
    <ant antfile="build-distrib.xml" inheritall="true" inheritrefs="true"/>
  </target>


  <target name="with.clover" depends="init">
    <property name="is.with.clover" value="true"/>
    <mkdir dir="${build.dir.clover.db}"/>
    <clover-setup initString="${build.dir.clover.db}/coverage.db"/>
  </target>


  <target name="clover.report">
    <clover-report>
      <current outfile="${build.dir.clover}/html_report" title="Parabuild">
        <format type="html"/>
      </current>
    </clover-report>
  </target>


  <target name="tests" depends="product">
    <!-- First disable for tests -->
    <clover-setup initString="${build.dir.clover.db}/coverage.db" enabled="no"/>
    <!-- Build tests -->
    <antfetch antfile="build-tests.xml" inheritall="true" inheritrefs="true" return="test.manager.http.port, test.builder.http.port"/>
  </target>


  <!-- Run serverside tests under all available servers -->
  <target name="run.tests.serverside" depends="all">
    <antfetch antfile="runtests-serverside.xml" inheritall="true" inheritrefs="true" return="test.errors, test.failures"/>
  </target>


  <!-- Run all tests -->
  <target name="run.tests" depends="run.tests.standalone,run.tests.serverside"></target>


  <!-- Run code quality tests -->
  <target name="run.quality.tests" depends="init">
    <ant antfile="build-quality.xml" inheritall="true" inheritrefs="true"/>
  </target>


  <!-- Builds product and product documentation -->
  <target name="product.all" depends="init,docs,product,manager"/>


  <!-- Build everything -->
  <target name="all" depends="init,product.all,manager,tests"/>


  <!-- Build everything cleanly -->
  <target name="all.clean" depends="clean,init,all"/>


  <!-- Runs minimum set of tests required to pass before checkin -->
  <target name="checkin.test" depends="clean">
    <antcall target="run.tests.standalone"/>
    <antcall target="run.tests.serverside">
      <param name="test.remote.builder" value="false"/>
    </antcall>
    <antcall target="run.tests.serverside">
      <param name="test.remote.builder" value="true"/>
    </antcall>
  </target>


  <!-- Runs ALL tests -->
  <target name="run.tests.all">
    <property name="fail.fast" value="off"/>
    <antcall target="run.tests.standalone"/>

    <echo message="Step 1"/>
    <echo message="test.errors ${test.errors}"/>
    <echo message="test.failures ${test.failures}"/>

    <antcall target="run.tests.serverside">
      <param name="test.remote.builder" value="false"/>
    </antcall>

    <echo message="Step 2"/>
    <echo message="test.errors ${test.errors}"/>
    <echo message="test.failures ${test.failures}"/>

    <antcall target="run.tests.serverside">
      <param name="test.remote.builder" value="true"/>
    </antcall>

    <!-- Batch fail -->
    <echo message="Step 3"/>
    <echo message="test.errors ${test.errors}"/>
    <echo message="test.failures ${test.failures}"/>

    <fail message="TEST ERRORS" if="test.errors"/>
    <fail message="TEST FAILURES" if="test.failures"/>
  </target>


  <!-- Service target -->
  <target name="export.database">
    <ant antfile="build-helper.xml" target="export.database" inheritall="true" inheritrefs="true"/>
  </target>

  <!--
  **********************************************************************************************************************
  *** Database support                                                                                               ***
  **********************************************************************************************************************
  -->

  <target name="database" depends="init, database.uptodate, database.init"/>

  <target name="database.uptodate">
    <uptodate property="database.needs.update" targetfile="${schema.sql}">
      <srcfiles dir="${build.dir.database}"/>
    </uptodate>
    <echo message="Datebase needs updating: ${database.needs.update}"/>
    <echo message="                 schema: ${schema.sql}"/>
    <echo message="           database dir: ${build.dir.database}"/>
  </target>


  <!-- initialize database -->
  <target name="database.init" if="database.needs.update">
    <property name="database.url" value="jdbc:hsqldb:${build.dir.database}/parabuild"/>
    <copy file="${config}/hsqldb-database.properties" tofile="${build.dir.database}/parabuild.properties"/>
    <copy file="${config}/hsqldb-database.script" tofile="${build.dir.database}/parabuild.script"/>
    <!-- run schema sql -->
    <sql autocommit="false" driver="org.hsqldb.jdbcDriver" url="${database.url}" userid="sa" password="p0a">
      <transaction src="${schema.sql}"/>
    </sql>
    <!-- NOTE: vimeshev - 09/07/2004 - call shutdown - HSQL 1.7.2 doesnt't stop automatically when last
         connection is closed -->
    <sql autocommit="true" driver="org.hsqldb.jdbcDriver" url="${database.url}" userid="sa" password="p0a">
      SET SCRIPTFORMAT COMPRESSED
      SHUTDOWN COMPACT
    </sql>
  </target>


  <!-- Builds Hessian Jar -->
  <target name="hessian" depends="hessian.compile, hessian.jar" description="Builds Hessian JAR"/>

  <target name="hessian.compile" description="Compiles Hessian">
    <mkdir dir="${build.dir.hessian.classes}"/>
    <javac destdir="${build.dir.hessian.classes}" includes="**/**.java" debug="on" includeantruntime="false" deprecation="yes">
      <compilerarg value="-proc:none"/>
      <src path="${3rdparty}/hessian308"/>
      <classpath>
        <pathelement path="${servlet.jar}"/>
      </classpath>
    </javac>
  </target>


  <target name="hessian.jar" depends="hessian.compile" description="Packages Hessian as a JAR file">
    <mkdir dir="${build.dir.hessian.result}"/>
    <jar destfile="${build.dir.hessian.result}/hessian.jar" compress="true" update="true">
      <fileset dir="${build.dir.hessian.classes}"/>
    </jar>
  </target>


  <target name="test.css" description="Packages test css html with parabuild-ci.css and stores under temp" depends="init">
    <property name="test.css.dir" value="${build.dir}/test/css"/>
    <mkdir dir="${test.css.dir}"/>
    <!--    <copy file="${config}/parabuild-ci.css" todir="${test.css.dir}"/>-->
    <!--    <copy file="${test.home}/style/parabuild-ci.html" todir="${test.css.dir}"/>-->
    <copy todir="${test.css.dir}">
      <fileset dir="${test.home}/style"/>
    </copy>
    <copy todir="${test.css.dir}">
      <fileset dir="${config}" includes="images/**"/>
    </copy>
  </target>

  <!--
  **********************************************************************************************************************
  *** Build Parabuild Installer                                                                                      ***
  **********************************************************************************************************************
  -->

  <target name="installer" depends="init, installer.compile, installer.jar">
  </target>

  <property name="installer.staging.dir" value="${build.dir}/installer_staging"/>
  <property name="installer.resource.staging.dir" value="${build.dir}/staging_installer_resource"/>
  <property name="installer.packagename" value="org.parabuild.ci.installer"/>
  <property name="installer.dirname" value="org/parabuild/ci/installer"/>

  <target name="installer.prepare">
    <mkdir dir="${installer.classes.dir}"/>
    <mkdir dir="${installer.staging.dir}"/>
  </target>


  <!-- Generate String classes -->
  <target name="installer.resources" depends="installer.prepare">
    <mkdir dir="${installer.resource.staging.dir}"/>
    <copy todir="${installer.resource.staging.dir}">
      <fileset refid="product.resources"/>
    </copy>
    <fixcrlf srcdir="${installer.resource.staging.dir}" eol="lf"/>
  </target>


  <!-- Compile Parabuild remote build manager installer-->
  <target name="installer.compile" depends="installer.resources">
    <javac destdir="${installer.classes.dir}" includes="org/parabuild/ci/installer/**.java" debug="on" includeantruntime="false">
      <compilerarg value="-proc:none"/>
      <classpath>
        <pathelement path="${i4jruntime.jar}"/>
        <pathelement path="${commons-logging.jar}"/>
        <pathelement path="${concurrent.jar}"/>
      </classpath>
      <src path="${src}"/>
    </javac>
  </target>


  <target name="installer.jar.prepare" depends="installer.compile">
    <copy todir="${installer.classes.dir}">
      <fileset dir="${installer.resource.staging.dir}"/>
    </copy>
    <copy file="${hsqldb.1.7.3.3.jar}" tofile="${installer.classes.dir}/hsqldb-1.7.jar"/>
    <copy file="${hsqldb.jar}" tofile="${installer.classes.dir}/hsqldb-1.8.jar"/>
    <uptodate property="installer.jar.uptodate" targetfile="${installer.staging.dir}/parabuild-installer.jar">
      <srcfiles dir="${installer.classes.dir}"/>
    </uptodate>
  </target>


  <target name="installer.jar" depends="installer.compile, installer.jar.prepare" unless="installer.jar.uptodate">
    <jar destfile="${installer.staging.dir}/parabuild-installer.jar" compress="true" update="true">
      <fileset dir="${installer.classes.dir}"/>
      <zipfileset src="${commons-logging.jar}"/>
      <zipfileset src="${concurrent.jar}"/>
    </jar>
  </target>

  <!-- ********************************************************************************** -->
  <!-- Build agent manager                                                                -->
  <!-- ********************************************************************************** -->

  <property name="manager.staging" value="${build.dir}/manager_staging"/>
  <property name="manager.classes.dir" value="${manager.staging}/classes"/>
  <property name="manager.war.staging" value="${build.dir}/staging_manager_war"/>


  <target name="manager" depends="manager.war"/>

  <target name="manager.prepare">
    <mkdir dir="${manager.classes.dir}"/>
  </target>


  <target name="manager.compile" depends="manager.prepare">
    <javac destdir="${manager.classes.dir}" includes="org/parabuild/ci/manager/server/**.java" debug="on" includeantruntime="false">
      <compilerarg value="-proc:none"/>
      <classpath>
        <pathelement path="${commons-logging.jar}"/>
        <fileset dir="${tomcat.home}/lib"/>
      </classpath>
      <src path="${src}"/>
    </javac>
  </target>

  <target name="manager.jar" depends="manager.compile">
    <mkdir dir="${manager.war.staging}/WEB-INF/lib"/>
    <jar destfile="${manager.war.staging}/WEB-INF/lib/parabuild-manager.jar" compress="false" update="true">
      <fileset dir="${manager.classes.dir}"/>
    </jar>
  </target>

  <target name="manager.war" depends="manager.jar">
    <mkdir dir="${build.dir.tomcat}/etc/app"/>
    <copy file="${config}/manager-web.xml" tofile="${manager.war.staging}/WEB-INF/web.xml"/>
    <zip destfile="${build.dir.tomcat}/etc/app/parabuild-manager.war" basedir="${manager.war.staging}" update="true" compress="false"/>
  </target>



  <!-- ********************************************************************************** -->
  <!-- Run tests that don't require the server running                                    -->
  <!-- ********************************************************************************** -->

  <!-- This property controls JUNIT behaviour in case of test
  errors. It can be overriden by a calling script (see build.xml) -->
  <property name="fail.fast" value="on"/>

  <!-- Prepare -->
  <target name="run.tests.standalone.init">
    <echo message="Starting tests ..."/>
    <delete dir="${test.temp.dir}"/>
    <mkdir dir="${test.temp.dir}"/>
    <condition property="is.windows">
      <os family="windows"/>
    </condition>
  </target>


  <!-- Run standalone tests -->
  <target name="run.tests.standalone" depends="run.tests.standalone.init">

    <junit fork="yes" printsummary="on" haltonfailure="${fail.fast}" haltonerror="${fail.fast}"
           errorproperty="test.errors" failureproperty="test.failures" maxmemory="100000000">
      <sysproperty key="test.data.home" value="${test.data}"/>
      <sysproperty key="test.prod.home" value="${build.dir.prod}"/>
      <classpath>
        <pathelement path="${build.dir.test.classes}/"/>
        <pathelement path="${build.dir.classes}/"/>
        <pathelement path="${installer.classes.dir}/"/>
        <pathelement path="${test.config}"/>
        <pathelement path="${log4j-1.2-api-2.8.2.jar}"/>
        <pathelement path="${log4j-api-2.8.2.jar}"/>
        <path refid="test.classpath"/>
      </classpath>
      <jvmarg value="-Xms50m"/>
      <jvmarg value="-Xmx50m"/>
      <jvmarg value="-Djava.awt.headless=true"/>
      <jvmarg value="-Dtest.temp.dir=${test.temp.dir}"/>
      <jvmarg value="-Dtest.dir.manager=${test.dir.manager}"/>
      <jvmarg value="-Dcatalina.home=${build.dir.tomcat}/lib"/>
      <jvmarg value="-Dcatalina.base=${build.dir.tomcat}/etc"/>
      <jvmarg value="-Djava.io.tmpdir=${build.dir}"/>
      <!--<jvmarg value="-Djavax.xml.transform.TransformerFactory=net.sf.saxon.TransformerFactoryImpl"/>-->

      <!--
      Run only test defined by test.single property
      this property normally set via -D option of ant command line
      and holds prefix name of the class(es) with test case
      -->
      <batchtest fork="yes" todir="${test.log.dir}" haltonfailure="${fail.fast}" haltonerror="${fail.fast}"
                 errorproperty="test.errors" failureproperty="test.failures" if="test.single">
        <fileset dir="${build.dir.test.classes}">
          <include name="**/${test.single}*.class"/>
          <exclude name="**/*$*.class"/>
        </fileset>
      </batchtest>

      <!--
      Run all standlalone tests as a batch
      -->
      <batchtest fork="yes" todir="${test.log.dir}" haltonfailure="${fail.fast}" haltonerror="${fail.fast}"
                 errorproperty="test.errors" failureproperty="test.failures" unless="test.single">
        <fileset dir="${build.dir.test.classes}">
          <include name="**/SATest*.class"/>
          <exclude name="**/*$*.class"/>
        </fileset>
      </batchtest>

      <!--
      Run windows-only tests as a batch.
      -->
      <batchtest fork="yes" todir="${test.log.dir}" haltonfailure="${fail.fast}" haltonerror="${fail.fast}"
                 errorproperty="test.errors" failureproperty="test.failures" unless="test.single" if="is.windows">
        <fileset dir="${build.dir.test.classes}">
          <include name="**/WindowsOnlySATest*.class"/>
          <exclude name="**/*$*.class"/>
        </fileset>
      </batchtest>

      <formatter type="plain" usefile="false"/>
      <formatter type="xml"/>
    </junit>
  </target>


</project>
